//STL的诞生

//希望有可以重复利用的东西
//面向对象和泛型编程思想，目的是提升复用性
//大多情况下，数据结构和算法都未能有一套标准，导致被迫从事
//大量重复工作
//建立数据结构和算法的一套标准，诞生了STL

//STL 标准模板库
//STL分类 容器（container）算法（algorithm）迭代器（iterator）
//容器和算法之间通过迭代器连接
//STL几乎所有的代码采用类模板和函数模板

//STL六大组件
//容器 算法 迭代器 仿函数 适配器（配接器）空间配置器
//容器：各种数据结构 vector list find copy
//算法：各种常用算法，如sort find copy for_each等
//迭代器：容器和算法之间的胶合剂
//仿函数：行为类似函数，可以作为算法的某种策略 小括号重载
//适配器：修饰容器或者仿函数或者迭代器接口的东西//很难
//空间配置器：负责空间的配置和管理

//STL中的容器算法和迭代器
//容器
//将运用最广泛的一些数据结构实现出来
//常见的数据结构，数组，链表，树，栈，队列，集合，映射表
//分为序列式容器 和 关联式容器
//序列式容器：强调值的排序，序列式容器中的每个元素有固定的位置
//关联式容器：二叉树结构，各元素之间没有严格物理上的顺序挂你

//算法：问题的求解方法
//分类：质变算法和非质变算法
//质变算法：运算过程中会改变元素的内容，例如拷贝替换删除
//非质变算法：运算过程中不会改变区间内元素的内容，例如查找，遍历。寻找极值等

//迭代器
//提供一种方法，使之能够依照顺序访问容器中的元素，但是不需要暴露容器内部
//每个容器都有其专属迭代器
//迭代器的使用类似于指针

//迭代器
//输入迭代器 只读访问 支持++ == ！=
//输出迭代器 只写访问 支持++
//前向迭代器 读写 支持++ == !=
//双向迭代器 读写 并且能够向前向后 ++ --
//随机访问迭代器 读写，可以用跳跃方式访问任意数据，功能最强 ++ -- [n] -n < > <= >=
//常用为双向 随机访问迭代器

//容器算法迭代器初识
//